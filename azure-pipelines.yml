trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '**/*.tf'
      - '**/*.tfvars'
      - 'azure-pipelines.yml'

# Simple parameter to select which environment to deploy
parameters:
  - name: environment
    displayName: 'Environment to deploy'
    type: string
    default: 'none'
    values:
      - 'none'
      - 'test'
      - 'preprod'
      - 'prod'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: serviceConnectionName
    value: 'azure-service-connection' # Replace with your Azure service connection name
  - name: terraformVersion
    value: '1.7.0'

stages:
- stage: Validate
  displayName: 'Validate Infrastructure'
  jobs:
  - job: Validate
    displayName: 'Validate Terraform'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        backendServiceArm: '$(serviceConnectionName)'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'tfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

- stage: DeployTest
  displayName: 'Deploy Test Environment'
  dependsOn: Validate
  condition: >
    and(
      succeeded('Validate'),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/main'),
        eq('${{ parameters.environment }}', 'test')
      )
    )
  jobs:
  - job: DeployTest
    displayName: 'Deploy to Test'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/test'
        backendServiceArm: '$(serviceConnectionName)'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'tfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/test'
        environmentServiceNameAzureRM: '$(serviceConnectionName)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/test'
        environmentServiceNameAzureRM: '$(serviceConnectionName)'
        commandOptions: '-auto-approve'

- stage: DeployPreProd
  displayName: 'Deploy PreProd Environment'
  dependsOn: Validate
  condition: eq('${{ parameters.environment }}', 'preprod')
  jobs:
  - job: DeployPreProd
    displayName: 'Deploy to PreProd'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/preprod'
        backendServiceArm: '$(serviceConnectionName)'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'tfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'preprod.terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/preprod'
        environmentServiceNameAzureRM: '$(serviceConnectionName)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/preprod'
        environmentServiceNameAzureRM: '$(serviceConnectionName)'
        commandOptions: '-auto-approve'

- stage: DeployProd
  displayName: 'Deploy Production Environment'
  dependsOn: Validate
  condition: eq('${{ parameters.environment }}', 'prod')
  jobs:
  - job: DeployProd
    displayName: 'Deploy to Production'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/prod'
        backendServiceArm: '$(serviceConnectionName)'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'tfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'prod.terraform.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/prod'
        environmentServiceNameAzureRM: '$(serviceConnectionName)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/enviroments/prod'
        environmentServiceNameAzureRM: '$(serviceConnectionName)'
        commandOptions: '-auto-approve'